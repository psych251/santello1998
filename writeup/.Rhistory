ungroup()
#wide format
handpose_wide_processed_uncentered_proj = handpose_means_proj %>%
pivot_wider(names_from = "Object", values_from = "Mean_angle_degrees")%>%
ungroup
#wide format for all participants, centered around mean for each joint angle calculated over objects
handpose_wide_processed_proj <-
data.frame(Joint = handpose_wide_processed_uncentered_proj$Joint,
select(handpose_wide_processed_uncentered_proj, -c(Joint))-rowMeans(select(handpose_wide_processed_uncentered_proj, -c(Joint)), na.rm = TRUE))
njoints5 = length(unique(handpose_long_proj$Joint)) #number of joints
nobj5 = length(unique(handpose_long_proj$Object)) #number of objects
#set row and column names
row.names(handpose_wide_processed_proj) <- handpose_wide_processed_proj$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed_proj <- handpose_wide_processed_proj %>%
select(-c(Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed_proj = t(handpose_wide_processed_proj)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed_proj)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs5 <- as.data.frame(handpose_wide_transposed_proj-handpose_wide_transposed_proj)
colnames(df_coeffs5) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj5 = ncol(handpose_wide_processed_proj)
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_coeffs5[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed_proj[,objnumber])
}
}
njoints = length(unique(handpose_long$Joint)) #number of joints
#post data collection addendum
#exclude double presses and readings reserved for exploratory analysis
handpose_long = handpose_long_unfiltered %>%
filter(!str_detect(Joint, "proj")) %>%
filter(!str_detect(Object, "ignore"))
njoints = length(unique(handpose_long$Joint)) #number of joints
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_coeffs5[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed_proj[,objnumber])
}
}
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
View(df_coeffs5)
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj5), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj5), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj5), PC1 = rep(NA, times=nobj5), PC2 = rep(NA, times=nobj5))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5$PC1[start:end] <- df_coeffs5[,1]
coeffs_list5$PC2[start:end] <- df_coeffs5[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check5 <- as.data.frame(handpose_wide_processed_proj)
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_check5[,objnumber] <- df_check5[,objnumber] - df_coeffs5[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
norm(data.matrix(df_check5), "f")
# Proportion of variance explained by each principal component
pva_list5 <- eigvals / sum(eigvals)
#plot cumulative proportion of variance explained by PCs for all participants
dfplot5 <- data.frame(Analysis = rep(as.factor(c(1:2)), each = njoints5), xval = rep(xValue, times=2), pva = c(cumsum(pva_list[[5]]), cumsum(pva_list5)))
#plot cumulative proportion of variance explained by PCs for all participants
xValue <- 1:njoints
#plot cumulative proportion of variance explained by PCs for all participants
dfplot5 <- data.frame(Analysis = rep(as.factor(c(1:2)), each = njoints5), xval = rep(xValue, times=2), pva = c(cumsum(pva_list[[5]]), cumsum(pva_list5)))
pva_list5
eigvecs
vp5
###Data Preparation
####Load Relevant Libraries and Functions
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
library(ggrepel)
library(readxl) # import excel files
####Import data
data_path <- '../participant_data/santello1998_participant_data.xlsx'
d1 = read_excel(data_path, sheet=1)
d1df = data.frame(d1)
#hololens gives data that is easiest to paste in long form
#### Data exclusion / filtering
#### Prepare data for analysis - create columns etc.
handpose_long_unfiltered = select(d1df, -Timestamp_seconds)
#post data collection addendum
#exclude double presses and readings reserved for exploratory analysis
handpose_long = handpose_long_unfiltered %>%
filter(!str_detect(Joint, "proj")) %>%
filter(!str_detect(Object, "ignore"))
#remove repeated observations marked during experiment
#remove projected abduction angles for confirmatory analysis
handpose_wide_raw = pivot_wider(handpose_long, names_from = Joint, values_from = Angle_degrees)
#average over repeated trials
handpose_means =  handpose_long %>%
group_by(ParticipantID, Object, Joint) %>%
summarise(Mean_angle_degrees = mean(Angle_degrees, na.rm = TRUE)) %>% #this will find mean over trials for given participant and object
ungroup()
#wide format for all participants
handpose_wide_processed_uncentered = handpose_means %>%
group_by(ParticipantID)%>%
pivot_wider(names_from = "Object", values_from = "Mean_angle_degrees")%>%
ungroup
#wide format for all participants, centered around mean for each joint angle calculated over objects
handpose_wide_processed_all <-
data.frame(ParticipantID = handpose_wide_processed_uncentered$ParticipantID, Joint = handpose_wide_processed_uncentered$Joint,
select(handpose_wide_processed_uncentered, -c(ParticipantID, Joint))-rowMeans(select(handpose_wide_processed_uncentered, -c(ParticipantID, Joint)), na.rm = TRUE))
#split data into participants for individual analysis
datalist = split(handpose_wide_processed_all, f= handpose_wide_processed_all$ParticipantID)
njoints = length(unique(handpose_long$Joint)) #number of joints
nobj = length(unique(handpose_long$Object)) #number of objects
npart = length(unique(handpose_long$ParticipantID)) #number of participants
#outputs to compare
pva_list <- vector(mode = "list", length = npart) #list of vectors containing percent variation explained by each component
coeffs_list <- data.frame(Participant = rep(as.factor(c(1:npart)), each=nobj), Object =  rep(as.character(NA), times=npart*nobj), PC1 = rep(NA, times=npart*nobj), PC2 = rep(NA, times=npart*nobj))  #dataframe containing coefficients of PC1 and PC2 for each object and participant (for plotting)
checkcoeffs = vector(mode = "list", length = npart) #should contain values close to zero if calculations ran correctly
#do PCA for each participant
for(i in 1:npart){
handpose_wide_processed = as.data.frame(datalist[[i]]) #get data for ith participant in a dataframe
#set row and column names
colnames(handpose_wide_processed) = colnames(handpose_wide_processed_all)
row.names(handpose_wide_processed) <- handpose_wide_processed$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed <- handpose_wide_processed %>%
select(-c(ParticipantID, Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed = t(handpose_wide_processed)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs <- as.data.frame(handpose_wide_transposed-handpose_wide_transposed)
colnames(df_coeffs) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj_i = ncol(handpose_wide_processed)
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_coeffs[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed[,objnumber])
}
}
start = nobj_i*(i-1)+1
end = nobj_i*i
coeffs_list$Object[start:end] <- rownames(df_coeffs)
coeffs_list$PC1[start:end] <- df_coeffs[,1]
coeffs_list$PC2[start:end] <- df_coeffs[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check <- as.data.frame(handpose_wide_processed)
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_check[,objnumber] <- df_check[,objnumber] - df_coeffs[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
checkcoeffs[[i]] = norm(data.matrix(df_check), "f")
# Proportion of variance explained by each principal component
pva_list[[i]] <- eigvals / sum(eigvals)
}
#plot cumulative proportion of variance explained by PCs for all participants
xValue <- 1:njoints
dfplot <- data.frame(Participant = rep(as.factor(c(1:npart)), each=njoints), xValue, c(cumsum(pva_list[[1]]), cumsum(pva_list[[2]]), cumsum(pva_list[[3]]), cumsum(pva_list[[4]]), cumsum(pva_list[[5]])))
colnames(dfplot)<-c("Participant", "PC", "Percent_variance_explained")
vp <- ggplot(dfplot, aes(x = PC, y= Percent_variance_explained, group = Participant, color=Participant)) +
geom_line() +ggtitle("Cumulative Proportion of Variance Explained")+
geom_point() + ylab("Cumulative Proportion of Variance Explained") + scale_x_discrete(name="Principal Component", limits = colnames(df_coeffs)) + theme_minimal()+theme(legend.position="top") # + ylim(0, 1)
vp
#knitr::opts_chunk$set(fig.width = 20)
#plot objects in the PC1-PC2 space for all participants
theme<-theme(panel.background = element_blank(),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),strip.background=element_blank(),axis.text.x=element_text(colour="black"),axis.text.y=element_text(colour="black"),axis.ticks=element_line(colour="black"),plot.margin=unit(c(1,1,1,1),"line"))
coeffs_list<- na.omit(coeffs_list)
p<-ggplot(coeffs_list,aes(x=PC1, y=PC2, group = Participant))
p<-p+geom_point()+ geom_text_repel(size=2, label=coeffs_list$Object, max.overlaps = Inf)+theme+facet_wrap(Participant~., ncol=1, labeller = label_both) + scale_x_reverse() + scale_y_reverse() +coord_fixed(ratio = 1)
p
#edited output figure size of the code chunk (thanks Xi Jia!) and font size of ggrepel post data collection
#AFTER DATA COLLECTION, some of the axes of PC plots may need to be flipped just to make visual comparison easier (sign of eigenvector doesn't matter to the analysis)
#![Plot of objects in the PC1/PC2 plane from the original paper (Fig. 7)](fig7_santello1998.jpg)
knitr::include_graphics("fig7_santello1998.jpg")
#Using projections of fingers to find abduction angles in the plane of the palm -- for Participant 5 alone
handpose_long_proj = handpose_long_unfiltered %>%
filter(!str_detect(Object, "ignore"))%>%
#remove repeated observations marked during experiment
filter(ParticipantID == "5" & (!str_detect(Joint, "ABD") | (str_detect(Joint, "proj") | str_detect(Joint, "Thumb"))))
#select data belonging to participant 5, which is either not an abduction angle, or if it is, then is either of the thumb or a projected angle
handpose_wide_raw_proj = pivot_wider(handpose_long_proj, names_from = Joint, values_from = Angle_degrees)
#average over repeated trials
handpose_means_proj =  handpose_long_proj %>%
select(-c(ParticipantID))%>%
group_by(Object, Joint) %>%
summarise(Mean_angle_degrees = mean(Angle_degrees, na.rm = TRUE)) %>% #this will find mean over trials for given participant and object
ungroup()
#wide format
handpose_wide_processed_uncentered_proj = handpose_means_proj %>%
pivot_wider(names_from = "Object", values_from = "Mean_angle_degrees")%>%
ungroup
#wide format for all participants, centered around mean for each joint angle calculated over objects
handpose_wide_processed_proj <-
data.frame(Joint = handpose_wide_processed_uncentered_proj$Joint,
select(handpose_wide_processed_uncentered_proj, -c(Joint))-rowMeans(select(handpose_wide_processed_uncentered_proj, -c(Joint)), na.rm = TRUE))
njoints5 = length(unique(handpose_long_proj$Joint)) #number of joints
nobj5 = length(unique(handpose_long_proj$Object)) #number of objects
#set row and column names
row.names(handpose_wide_processed_proj) <- handpose_wide_processed_proj$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed_proj <- handpose_wide_processed_proj %>%
select(-c(Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed_proj = t(handpose_wide_processed_proj)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed_proj)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs5 <- as.data.frame(handpose_wide_transposed_proj-handpose_wide_transposed_proj)
colnames(df_coeffs5) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj5 = ncol(handpose_wide_processed_proj)
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_coeffs5[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed_proj[,objnumber])
}
}
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj5), PC1 = rep(NA, times=nobj5), PC2 = rep(NA, times=nobj5))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5$PC1[start:end] <- df_coeffs5[,1]
coeffs_list5$PC2[start:end] <- df_coeffs5[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check5 <- as.data.frame(handpose_wide_processed_proj)
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_check5[,objnumber] <- df_check5[,objnumber] - df_coeffs5[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
norm(data.matrix(df_check5), "f")
# Proportion of variance explained by each principal component
pva_list5 <- eigvals / sum(eigvals)
#plot cumulative proportion of variance explained by PCs for all participants
dfplot5 <- data.frame(Analysis = rep(as.factor(c(1:2)), each = njoints5), xval = rep(xValue, times=2), pva = c(cumsum(pva_list[[5]]), cumsum(pva_list5)))
colnames(dfplot5)<-c("Analysis", "PC", "PVE")
vp5 <- ggplot(dfplot5, aes(x = PC, y= PVE, group = Analysis, color = Analysis)) +
geom_line() +ggtitle("Cumulative Proportion of Variance Explained for Participant 5")+
geom_point() + ylab("Cumulative Proportion of Variance Explained") + scale_x_discrete(name="Principal Component", limits = colnames(df_coeffs5)) + theme_minimal()
vp5
#plot objects in the PC1-PC2 space for participant 5
coeffs_list5<- na.omit(coeffs_list5)
expplot1 <- data.frame(Analysis = rep(as.factor(c(1:2)), each=nobj5), Object = rep(coeffs_list5$Object, times=2), PC1 = c(filter(coeffs_list, coeffs_list$Participant=="5")$PC1, (-1)*coeffs_list5$PC1), PC2 = c(filter(coeffs_list, coeffs_list$Participant=="5")$PC2, coeffs_list5$PC2))
p512<-ggplot(expplot1, aes(x=PC1, y=PC2, group = Analysis, color = Analysis))
p512<-p512+geom_point()+ geom_text_repel(size=2, label=expplot1$Object, max.overlaps = Inf)+theme + scale_x_reverse() + scale_y_reverse() +coord_fixed(ratio = 1) # + facet_wrap(Analysis~., ncol=2, labeller = label_both) +
p512
#with scaling by standard deviation
handpose_wide_transposed = handpose_wide_transposed %>%
apply(2,function(x){x/sd(x)}) #scaling step
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs5 <- as.data.frame(handpose_wide_transposed-handpose_wide_transposed)
colnames(df_coeffs5) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj5 = ncol(handpose_wide_processed)
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_coeffs5[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*t(handpose_wide_transposed)[,objnumber])
}
}
coeffs_list5 <- data.frame(Object =  rep(as.character(NA), times=nobj), PC1 = rep(NA, times=nobj), PC2 = rep(NA, times=nobj))  #dataframe containing coefficients of PC1 and PC2 for each object (for plotting)
start = 1
end = nobj5
coeffs_list5$Object[start:end] <- rownames(df_coeffs5)
coeffs_list5$PC1[start:end] <- df_coeffs5[,1]
coeffs_list5$PC2[start:end] <- df_coeffs5[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check5 <- as.data.frame(t(handpose_wide_transposed))
for (objnumber in 1:nobj5){
for (pcnumber in 1:njoints) {
df_check5[,objnumber] <- df_check5[,objnumber] - df_coeffs5[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
norm(data.matrix(df_check5), "f")
# Proportion of variance explained by each principal component
pva_list5 <- eigvals / sum(eigvals)
#plot cumulative proportion of variance explained by PCs for all participants
dfplot5 <- data.frame(Analysis = rep(as.factor(c(1:2)), each = njoints), xval = rep(xValue, times=2), pva = c(cumsum(pva_list[[5]]), cumsum(pva_list5)))
colnames(dfplot5)<-c("Analysis", "PC", "PVE")
vp5 <- ggplot(dfplot5, aes(x = PC, y= PVE, group = Analysis, color = Analysis)) +
geom_line() +ggtitle("Cumulative Proportion of Variance Explained for Participant 5")+
geom_point() + ylab("Cumulative Proportion of Variance Explained") + scale_x_discrete(name="Principal Component", limits = colnames(df_coeffs5)) + theme_minimal()
vp5
#plot objects in the PC1-PC2 space for participant 5
coeffs_list5<- na.omit(coeffs_list5)
expplot1 <- data.frame(Analysis = rep(as.factor(c(1:2)), each=nobj5), Object = rep(coeffs_list5$Object, times=2), PC1 = c(filter(coeffs_list, coeffs_list$Participant=="5")$PC1, coeffs_list5$PC1), PC2 = c(filter(coeffs_list, coeffs_list$Participant=="5")$PC2, coeffs_list5$PC2))
p512<-ggplot(expplot1, aes(x=PC1, y=PC2, group = Analysis, color = Analysis))
p512<-p512+geom_point()+ geom_text_repel(size=3, label=expplot1$Object, max.overlaps = Inf)+ scale_x_reverse() + scale_y_reverse() + facet_wrap(Analysis~., ncol=2, labeller = label_both, scales="free")
p512
vp5
p<-ggplot(coeffs_list,aes(x=PC1, y=PC2, group = Participant))
p<-p+geom_point()+ geom_text_repel(size=5, label=coeffs_list$Object, max.overlaps = Inf)+theme+facet_wrap(Participant~., ncol=1, labeller = label_both) + scale_x_reverse() + scale_y_reverse() +coord_fixed(ratio = 1)
p
#do PCA for each participant
for(i in 1:npart){
handpose_wide_processed = as.data.frame(datalist[[i]]) #get data for ith participant in a dataframe
#set row and column names
colnames(handpose_wide_processed) = colnames(handpose_wide_processed_all)
row.names(handpose_wide_processed) <- handpose_wide_processed$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed <- handpose_wide_processed %>%
select(-c(ParticipantID, Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed = t(handpose_wide_processed)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs <- as.data.frame(handpose_wide_transposed-handpose_wide_transposed)
colnames(df_coeffs) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj_i = ncol(handpose_wide_processed)
nobj_i
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_coeffs[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed[,objnumber])
}
}
start = nobj_i*(i-1)+1
end = nobj_i*i
coeffs_list$Object[start:end] <- rownames(df_coeffs)
coeffs_list$PC1[start:end] <- df_coeffs[,1]
coeffs_list$PC2[start:end] <- df_coeffs[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check <- as.data.frame(handpose_wide_processed)
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_check[,objnumber] <- df_check[,objnumber] - df_coeffs[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
checkcoeffs[[i]] = norm(data.matrix(df_check), "f")
# Proportion of variance explained by each principal component
pva_list[[i]] <- eigvals / sum(eigvals)
}
#split data into participants for individual analysis
datalist = split(handpose_wide_processed_all, f= handpose_wide_processed_all$ParticipantID)
njoints = length(unique(handpose_long$Joint)) #number of joints
nobj = length(unique(handpose_long$Object)) #number of objects
npart = length(unique(handpose_long$ParticipantID)) #number of participants
#outputs to compare
pva_list <- vector(mode = "list", length = npart) #list of vectors containing percent variation explained by each component
checkcoeffs = vector(mode = "list", length = npart) #should contain values close to zero if calculations ran correctly
#do PCA for each participant
for(i in 1:npart){
handpose_wide_processed = as.data.frame(datalist[[i]]) #get data for ith participant in a dataframe
#set row and column names
colnames(handpose_wide_processed) = colnames(handpose_wide_processed_all)
row.names(handpose_wide_processed) <- handpose_wide_processed$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed <- handpose_wide_processed %>%
select(-c(ParticipantID, Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed = t(handpose_wide_processed)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs <- as.data.frame(handpose_wide_transposed-handpose_wide_transposed)
colnames(df_coeffs) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj_i = ncol(handpose_wide_processed)
nobj_i
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_coeffs[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed[,objnumber])
}
}
start = nobj_i*(i-1)+1
end = nobj_i*i
coeffs_list$Object[start:end] <- rownames(df_coeffs)
coeffs_list$PC1[start:end] <- df_coeffs[,1]
coeffs_list$PC2[start:end] <- df_coeffs[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check <- as.data.frame(handpose_wide_processed)
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_check[,objnumber] <- df_check[,objnumber] - df_coeffs[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
checkcoeffs[[i]] = norm(data.matrix(df_check), "f")
# Proportion of variance explained by each principal component
pva_list[[i]] <- eigvals / sum(eigvals)
}
####Import data
data_path <- '../participant_data/santello1998_participant_data.xlsx'
d1 = read_excel(data_path, sheet=1)
d1df = data.frame(d1)
handpose_long_unfiltered = select(d1df, -Timestamp_seconds)
#post data collection addendum
#exclude double presses and readings reserved for exploratory analysis
handpose_long = handpose_long_unfiltered %>%
filter(!str_detect(Joint, "proj")) %>%
filter(!str_detect(Object, "ignore"))
#average over repeated trials
handpose_means =  handpose_long %>%
group_by(ParticipantID, Object, Joint) %>%
summarise(Mean_angle_degrees = mean(Angle_degrees, na.rm = TRUE)) %>% #this will find mean over trials for given participant and object
ungroup()
#wide format for all participants
handpose_wide_processed_uncentered = handpose_means %>%
group_by(ParticipantID)%>%
pivot_wider(names_from = "Object", values_from = "Mean_angle_degrees")%>%
ungroup
#wide format for all participants, centered around mean for each joint angle calculated over objects
handpose_wide_processed_all <-
data.frame(ParticipantID = handpose_wide_processed_uncentered$ParticipantID, Joint = handpose_wide_processed_uncentered$Joint,
select(handpose_wide_processed_uncentered, -c(ParticipantID, Joint))-rowMeans(select(handpose_wide_processed_uncentered, -c(ParticipantID, Joint)), na.rm = TRUE))
#split data into participants for individual analysis
datalist = split(handpose_wide_processed_all, f= handpose_wide_processed_all$ParticipantID)
njoints = length(unique(handpose_long$Joint)) #number of joints
nobj = length(unique(handpose_long$Object)) #number of objects
npart = length(unique(handpose_long$ParticipantID)) #number of participants
#outputs to compare
pva_list <- vector(mode = "list", length = npart) #list of vectors containing percent variation explained by each component
coeffs_list <- data.frame(Participant = rep(as.factor(c(1:npart)), each=nobj), Object =  rep(as.character(NA), times=npart*nobj), PC1 = rep(NA, times=npart*nobj), PC2 = rep(NA, times=npart*nobj))  #dataframe containing coefficients of PC1 and PC2 for each object and participant (for plotting)
checkcoeffs = vector(mode = "list", length = npart) #should contain values close to zero if calculations ran correctly
#do PCA for each participant
for(i in 1:npart){
handpose_wide_processed = as.data.frame(datalist[[i]]) #get data for ith participant in a dataframe
#set row and column names
colnames(handpose_wide_processed) = colnames(handpose_wide_processed_all)
row.names(handpose_wide_processed) <- handpose_wide_processed$Joint
#keep only joint angles in the data, remove columns where data is missing (possible if all trials for an object failed)
handpose_wide_processed <- handpose_wide_processed %>%
select(-c(ParticipantID, Joint)) %>%
select_if(~ !any(is.na(.)))
handpose_wide_transposed = t(handpose_wide_processed)
#eigenvalues and eigenvectors of covariance matrix
jointscov = cov(handpose_wide_transposed)
eigvals = eigen(jointscov)$values
eigvecs = eigen(jointscov)$vectors
#create array to store joint vectors for objects expressed in PC basis
df_coeffs <- as.data.frame(handpose_wide_transposed-handpose_wide_transposed)
colnames(df_coeffs) <- c("PC1", "PC2", "PC3", "PC4", "PC5", "PC6", "PC7", "PC8", "PC9", "PC10","PC11", "PC12", "PC13", "PC14","PC15")
#actual number of objects for which data was captured for this participant
nobj_i = ncol(handpose_wide_processed)
nobj_i
#fill in coefficients of each PC for each object for this participant
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_coeffs[objnumber,pcnumber] <- sum(eigvecs[,pcnumber]*handpose_wide_processed[,objnumber])
}
}
start = nobj_i*(i-1)+1
end = nobj_i*i
coeffs_list$Object[start:end] <- rownames(df_coeffs)
coeffs_list$PC1[start:end] <- df_coeffs[,1]
coeffs_list$PC2[start:end] <- df_coeffs[,2]
#check -- this should be close to zero in each entry, it is the object data minus the appropriate linear combination of PCs for that object with the calculated coefficients
df_check <- as.data.frame(handpose_wide_processed)
for (objnumber in 1:nobj_i){
for (pcnumber in 1:njoints) {
df_check[,objnumber] <- df_check[,objnumber] - df_coeffs[objnumber, pcnumber]*eigvecs[,pcnumber]
}
}
#frobenius norm will be close to zero only if all entries are close to zero as they should be
checkcoeffs[[i]] = norm(data.matrix(df_check), "f")
# Proportion of variance explained by each principal component
pva_list[[i]] <- eigvals / sum(eigvals)
}
View(checkcoeffs)
View(coeffs_list)
View(df_check)
View(datalist)
View(handpose_means_proj)
filter(coeffs_list, Participant == 1)
norw(filter(coeffs_list, Participant == 1))
nrow(filter(coeffs_list, Participant == 1))
filter(coeffs_list, Participant == 2)
filter(coeffs_list, Participant == 3)
filter(coeffs_list, Participant == 4)
filter(coeffs_list, Participant == 5)
